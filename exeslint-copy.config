/** @type { import("eslint").Linter.FlatConfig[] } */
import React from "eslint-plugin-react";
import reactHooks from "eslint-plugin-react-hooks";
import airbnb from "eslint-config-airbnb";
import tsEs from "@typescript-eslint/eslint-plugin";
import tsEsParser from "@typescript-eslint/parser";
// import a11y from "eslint-plugin-jsx-a11y";
// import imports from "eslint-plugin-import";
import * as globals from "globals";
import prettier from "prettier";
import markdown from "eslint-plugin-markdown";

export default [
  // Global config
  // js.configs.recommended,
  // airbnb,
  {
    files: ["src/**/*"], // Global
    plugins: {
      airbnb,
      markdown: markdown,
      react: React,
      reactHooks,
      prettier,
    },
    languageOptions: {
      sourceType: "module",
      ecmaVersion: "latest",
      // parser: tsEsParser,
      // parserOptions: {
      //   requireConfigFile: false,
      // },
      globals: {
        ...globals.browser
      }
    },
    linterOptions: {
      noInlineConfig: true,
      reportUnusedDisableDirectives: true,
    },
    ignores: [
      "node_modules/*",
      "/build/",
      "/dist/",
      "next",
    ],
    rules: {
      // strict: "off",
      // "prettier/prettier": [
      //   "error",
      //   {
      //     usePrettierrc: true
      //   }
      // ],
      semi: ["warn", "always"],
      // "prefer-const": "error",
    },
    settings: {
      react: {
        version: "detect",
      }
    }
  },
  // Markdown config
  {
    files: ["**/*.md"],
    plugins: {
      markdown: markdown,
    },
    processor: "markdown/markdown",
    rules: {
      semi: "error",
    },
    settings: {
      sharedData: "Hello",
    }
  },
  // Javascript config
  {
    files: ["**/*.js", "**/*.mjs", "**/*.jsx"],
    // plugins: {
    //   typescript: tsEs,
    // },
    // languageOptions: {
    //   parser: tsEsParser,
    // },
    rules: {
      semi: "error",
    },
  },
  // Typescript config
  {
    files: ["**/*.ts", "**/*.mts", "**/*.tsx"],
    plugins: {
      typescript: tsEs,
    },
    languageOptions: {
      parser: tsEsParser,
    },
    rules: {
      semi: "error",
    },
  },
]